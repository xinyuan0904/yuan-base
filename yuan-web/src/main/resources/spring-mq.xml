<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:amq="http://activemq.apache.org/schema/core" 
	xmlns:jms="http://www.springframework.org/schema/jms" 
	xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd
      http://www.springframework.org/schema/jms
      http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
      http://activemq.apache.org/schema/core
      http://activemq.apache.org/schema/core/activemq-core-5.10.2.xsd ">

	<!-- ActiveMQ 连接工厂 -->
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
	<amq:connectionFactory id="mqConnectionFactory" brokerURL="tcp://localhost:61616" userName="" password="">
	</amq:connectionFactory>

	 <!-- Spring Caching连接工厂 -->
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
    <bean id="mqCachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="mqConnectionFactory"></property>
        <!-- <constructor-arg ref="mqConnectionFactory" /> -->
        <!-- Session缓存数量 -->
        <property name="sessionCacheSize" value="100" />
    </bean>
    
    <!-- 定义消息队列（Queue） -->  
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
        <!-- 设置消息队列的名字 -->  
        <constructor-arg>  
            <value>testDestination</value>  
        </constructor-arg>  
    </bean>  
    
    <!-- Spring JmsTemplate 的消息生产者 start-->
    <!-- 定义JmsTemplate的Queue类型 -->
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate" >
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <constructor-arg ref="mqCachingConnectionFactory" />
        <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
        <property name="pubSubDomain" value="false" />
        <property name="defaultDestination" ref="queueDestination" />
         <property name="receiveTimeout" value="10000" />  
    </bean>

    <!-- 定义JmsTemplate的Topic类型 -->
    <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
         <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <constructor-arg ref="mqCachingConnectionFactory" />
        <!-- pub/sub模型（发布/订阅） -->
        <property name="pubSubDomain" value="true" />
        <property name="defaultDestination" ref="queueDestination"></property>
         <property name="receiveTimeout" value="10000" />  
    </bean>

    <!--Spring JmsTemplate 的消息生产者 end-->
	<!-- 消息消费者 start-->
	<!--加入监听器  -->  
     <bean id="queueMessageListener" class="com.yuan.web.listener.QueueMessageListener" />  
     <!-- 显示注入消息监听容器（Queue），配置连接工厂，监听的目标是demoQueueDestination，监听器是上面定义的监听器 -->  
    <bean id="queueListenerContainer"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="mqCachingConnectionFactory" />  
        <property name="destination" ref="queueDestination" />  
        <property name="messageListener" ref="queueMessageListener" />  
    </bean>  
	
    <!-- 定义Queue监听器 
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="mqCachingConnectionFactory" acknowledge="auto">
        <jms:listener destination="test.queue" ref="queueReceiver1"/>
        <jms:listener destination="test.queue" ref="queueReceiver2"/>
    </jms:listener-container> -->

    <!-- 定义Topic监听器
    <jms:listener-container destination-type="topic" container-type="default" connection-factory="mqCachingConnectionFactory" acknowledge="auto">
        <jms:listener destination="test.topic" ref="topicReceiver1"/>
        <jms:listener destination="test.topic" ref="topicReceiver2"/>
    </jms:listener-container>
 -->
    <!-- 消息消费者 end -->
    
</beans>